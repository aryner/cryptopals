package main

import (
	"fmt"
)

var reducingPoly = int(283)
var sbox = []byte{
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
}

//This example has cache, timing, and branch prediction side-channel leaks, and is not suitable for use in cryptography.
func peasantsMult(a int, b int) int {
	var p = int(0)
	for b > 0 {
		if b % 2 == 1 {
			p = p ^ a
		}
		b = b >> 1
		a = a << 1
		if a >= 256 {
			a = a ^ reducingPoly
		}
	}
	return p
}

//Rotates a 32 bit word 8 bits to the left, wrapping back to the begining
func Rotate(word []byte) []byte {
	tail := word[0]
	for i:=1; i<len(word); i++ {
		word[i-1] = word[i]
	}
	word[len(word)-1] = tail
	return word
}

func Rcon(i byte) byte {
	rcon := 1
	i--
	for ; i > 0; i-- {
		rcon = rcon << 1
		if rcon >= 256 {
			rcon ^=  reducingPoly
		}
	}
	return byte(rcon)
}

func GetRconTo(i int) []byte {
	rcon := make([]byte, i, i)
	for ;i>0; i-- {
		rcon[i-1] = Rcon(byte(i))
	}
	return rcon
}

func SboxLookup(b byte) byte {
	lsn := b & 0x0f
	msn := b >> 4
	return sbox[msn*16 + lsn]
}

func KeyScheduleCore(word []byte, i byte) []byte {
	output := Rotate(word)
	b1 := SboxLookup(output[0]) ^ Rcon(i)
	b2 := SboxLookup(output[1]) 
	b3 := SboxLookup(output[2]) 
	b4 := SboxLookup(output[3]) 

	return []byte{b1,b2,b3,b4}
}

func KeySchedule(word []byte) []byte{
	ekey := word[:16]
        for i:=1; len(ekey) < 176; i++ {
		t := copy(ekey[len(ekey)-4:])
		t = KeyScheduleCore(t,byte(i))
		t = xorSlices(ekey[len(ekey)-16:len(ekey)-12], t)
		ekey = append(ekey,t...)
		for j:=0; j<3;j++ {
			t = copy(ekey[len(ekey)-4:])
			t = xorSlices(ekey[len(ekey)-16:len(ekey)-12], t)
			ekey = append(ekey,t...)
		}
	}
	return ekey
}

func copy(b []byte) []byte {
	result := make([]byte,len(b),len(b))
	for i:=0; i<len(b); i++ {
		result[i] = b[i]
	}
	return result
}

func xorSlices(a,b []byte) []byte {
	xored := make([]byte,len(a),len(a))
	for i:=0; i<len(a); i++ {
		xored[i] = a[i] ^ b[i]
	}
	return xored
}

func main() {
	fmt.Printf("%b\n",peasantsMult(83,202))
	test := []byte{0x1d,0x2c,0x3a,0x4f}
	fmt.Printf("%x\n",Rotate(test))
	rcon := GetRconTo(10)
	for i, v := range rcon {
		fmt.Printf("%d - %x\n",i+1,v)
	}
	fmt.Printf("%x\n",SboxLookup(byte(0x9a)))
	testVector := []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
	key := KeySchedule(testVector)
	for i:=0; i<len(key); i+=16 {
		for j:=0; j<16; j++ {
			fmt.Printf("%x ",key[i+j])
		}
		fmt.Println()
	}
	fmt.Println("************")
	testVector = []byte{0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}
	key = KeySchedule(testVector)
	for i:=0; i<len(key); i+=16 {
		for j:=0; j<16; j++ {
			fmt.Printf("%x ",key[i+j])
		}
		fmt.Println()
	}
	fmt.Println("************")
	testVector = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}
	key = KeySchedule(testVector)
	for i:=0; i<len(key); i+=16 {
		for j:=0; j<16; j++ {
			fmt.Printf("%x ",key[i+j])
		}
		fmt.Println()
	}
	fmt.Println("************")
	testVector = []byte{0x69, 0x20, 0xe2, 0x99, 0xa5, 0x20, 0x2a, 0x6d, 0x65, 0x6e, 0x63, 0x68, 0x69, 0x74, 0x6f, 0x2a}
	key = KeySchedule(testVector)
	for i:=0; i<len(key); i+=16 {
		for j:=0; j<16; j++ {
			fmt.Printf("%x ",key[i+j])
		}
		fmt.Println()
	}
	fmt.Println("************")
}
